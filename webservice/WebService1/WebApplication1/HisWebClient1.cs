//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.33440.
// 
namespace HisWebClient1 {
    using System.Diagnostics;
    using System;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System.Web.Services;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="InstanceDataInfoSoap", Namespace="http://www.dhcc.com.cn/epr/metaservice")]
    public partial class InstanceDataInfo : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback AddInstanceLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFinalStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckHappenDateTimeValidOperationCompleted;
        
        private System.Threading.SendOrPostCallback ClearLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetAllLogsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetCurrentStatusOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDataByInstanceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetDescDataByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFinalLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupDataByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetGroupItemListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetInstanceDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetKBDiagnosIDByEpisodeIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMultipleDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNormalDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetNormalDataOldOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetParentGroupListOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRefInstanceIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetTemplateIDByIDOperationCompleted;
        
        private System.Threading.SendOrPostCallback ImportInstanceDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitAfterMultiOperOperationCompleted;
        
        private System.Threading.SendOrPostCallback InitAfterSingleOperOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceGroupDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback ReplaceTemplateDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback SaveMultipleDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestSaveMultipleDataOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateEPRLogsOperationCompleted;
        
        /// <remarks/>
        public InstanceDataInfo() {
            this.Url = "http://172.26.100.32/dthealth/web/EPRservice.BOInstanceData.cls";
        }
        
        /// <remarks/>
        public event AddInstanceLogCompletedEventHandler AddInstanceLogCompleted;
        
        /// <remarks/>
        public event AddLogCompletedEventHandler AddLogCompleted;
        
        /// <remarks/>
        public event ChangeStatusCompletedEventHandler ChangeStatusCompleted;
        
        /// <remarks/>
        public event CheckFinalStatusCompletedEventHandler CheckFinalStatusCompleted;
        
        /// <remarks/>
        public event CheckHappenDateTimeValidCompletedEventHandler CheckHappenDateTimeValidCompleted;
        
        /// <remarks/>
        public event ClearLogCompletedEventHandler ClearLogCompleted;
        
        /// <remarks/>
        public event GetAllLogsCompletedEventHandler GetAllLogsCompleted;
        
        /// <remarks/>
        public event GetCurrentStatusCompletedEventHandler GetCurrentStatusCompleted;
        
        /// <remarks/>
        public event GetDataCompletedEventHandler GetDataCompleted;
        
        /// <remarks/>
        public event GetDataByIDCompletedEventHandler GetDataByIDCompleted;
        
        /// <remarks/>
        public event GetDataByInstanceIDCompletedEventHandler GetDataByInstanceIDCompleted;
        
        /// <remarks/>
        public event GetDescDataByIDCompletedEventHandler GetDescDataByIDCompleted;
        
        /// <remarks/>
        public event GetFinalLogCompletedEventHandler GetFinalLogCompleted;
        
        /// <remarks/>
        public event GetGroupDataByIDCompletedEventHandler GetGroupDataByIDCompleted;
        
        /// <remarks/>
        public event GetGroupItemListCompletedEventHandler GetGroupItemListCompleted;
        
        /// <remarks/>
        public event GetInstanceDataCompletedEventHandler GetInstanceDataCompleted;
        
        /// <remarks/>
        public event GetKBDiagnosIDByEpisodeIDCompletedEventHandler GetKBDiagnosIDByEpisodeIDCompleted;
        
        /// <remarks/>
        public event GetMultipleDataCompletedEventHandler GetMultipleDataCompleted;
        
        /// <remarks/>
        public event GetNormalDataCompletedEventHandler GetNormalDataCompleted;
        
        /// <remarks/>
        public event GetNormalDataOldCompletedEventHandler GetNormalDataOldCompleted;
        
        /// <remarks/>
        public event GetParentGroupListCompletedEventHandler GetParentGroupListCompleted;
        
        /// <remarks/>
        public event GetRefInstanceIDCompletedEventHandler GetRefInstanceIDCompleted;
        
        /// <remarks/>
        public event GetTemplateIDByIDCompletedEventHandler GetTemplateIDByIDCompleted;
        
        /// <remarks/>
        public event ImportInstanceDataCompletedEventHandler ImportInstanceDataCompleted;
        
        /// <remarks/>
        public event InitAfterMultiOperCompletedEventHandler InitAfterMultiOperCompleted;
        
        /// <remarks/>
        public event InitAfterSingleOperCompletedEventHandler InitAfterSingleOperCompleted;
        
        /// <remarks/>
        public event ReplaceGroupDataCompletedEventHandler ReplaceGroupDataCompleted;
        
        /// <remarks/>
        public event ReplaceTemplateDataCompletedEventHandler ReplaceTemplateDataCompleted;
        
        /// <remarks/>
        public event SaveDataCompletedEventHandler SaveDataCompleted;
        
        /// <remarks/>
        public event SaveMultipleDataCompletedEventHandler SaveMultipleDataCompleted;
        
        /// <remarks/>
        public event TestSaveMultipleDataCompletedEventHandler TestSaveMultipleDataCompleted;
        
        /// <remarks/>
        public event UpdateEPRLogsCompletedEventHandler UpdateEPRLogsCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.AddInstanceLog", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddInstanceLog(string parInstanceID, EMixInstanceLog parLog) {
            object[] results = this.Invoke("AddInstanceLog", new object[] {
                        parInstanceID,
                        parLog});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddInstanceLog(string parInstanceID, EMixInstanceLog parLog, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddInstanceLog", new object[] {
                        parInstanceID,
                        parLog}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddInstanceLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddInstanceLogAsync(string parInstanceID, EMixInstanceLog parLog) {
            this.AddInstanceLogAsync(parInstanceID, parLog, null);
        }
        
        /// <remarks/>
        public void AddInstanceLogAsync(string parInstanceID, EMixInstanceLog parLog, object userState) {
            if ((this.AddInstanceLogOperationCompleted == null)) {
                this.AddInstanceLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddInstanceLogOperationCompleted);
            }
            this.InvokeAsync("AddInstanceLog", new object[] {
                        parInstanceID,
                        parLog}, this.AddInstanceLogOperationCompleted, userState);
        }
        
        private void OnAddInstanceLogOperationCompleted(object arg) {
            if ((this.AddInstanceLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddInstanceLogCompleted(this, new AddInstanceLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.AddLog", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string AddLog(string parInstanceID, EInstanceLog parLog) {
            object[] results = this.Invoke("AddLog", new object[] {
                        parInstanceID,
                        parLog});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddLog(string parInstanceID, EInstanceLog parLog, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddLog", new object[] {
                        parInstanceID,
                        parLog}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndAddLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void AddLogAsync(string parInstanceID, EInstanceLog parLog) {
            this.AddLogAsync(parInstanceID, parLog, null);
        }
        
        /// <remarks/>
        public void AddLogAsync(string parInstanceID, EInstanceLog parLog, object userState) {
            if ((this.AddLogOperationCompleted == null)) {
                this.AddLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddLogOperationCompleted);
            }
            this.InvokeAsync("AddLog", new object[] {
                        parInstanceID,
                        parLog}, this.AddLogOperationCompleted, userState);
        }
        
        private void OnAddLogOperationCompleted(object arg) {
            if ((this.AddLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddLogCompleted(this, new AddLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.ChangeStatus", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ChangeStatus(string parInstanceID, string parStatus) {
            object[] results = this.Invoke("ChangeStatus", new object[] {
                        parInstanceID,
                        parStatus});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeStatus(string parInstanceID, string parStatus, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeStatus", new object[] {
                        parInstanceID,
                        parStatus}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndChangeStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeStatusAsync(string parInstanceID, string parStatus) {
            this.ChangeStatusAsync(parInstanceID, parStatus, null);
        }
        
        /// <remarks/>
        public void ChangeStatusAsync(string parInstanceID, string parStatus, object userState) {
            if ((this.ChangeStatusOperationCompleted == null)) {
                this.ChangeStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeStatusOperationCompleted);
            }
            this.InvokeAsync("ChangeStatus", new object[] {
                        parInstanceID,
                        parStatus}, this.ChangeStatusOperationCompleted, userState);
        }
        
        private void OnChangeStatusOperationCompleted(object arg) {
            if ((this.ChangeStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeStatusCompleted(this, new ChangeStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.CheckFinalStatus" +
            "", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckFinalStatus(string AInstanceID, string parStatusStr) {
            object[] results = this.Invoke("CheckFinalStatus", new object[] {
                        AInstanceID,
                        parStatusStr});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckFinalStatus(string AInstanceID, string parStatusStr, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckFinalStatus", new object[] {
                        AInstanceID,
                        parStatusStr}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckFinalStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFinalStatusAsync(string AInstanceID, string parStatusStr) {
            this.CheckFinalStatusAsync(AInstanceID, parStatusStr, null);
        }
        
        /// <remarks/>
        public void CheckFinalStatusAsync(string AInstanceID, string parStatusStr, object userState) {
            if ((this.CheckFinalStatusOperationCompleted == null)) {
                this.CheckFinalStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFinalStatusOperationCompleted);
            }
            this.InvokeAsync("CheckFinalStatus", new object[] {
                        AInstanceID,
                        parStatusStr}, this.CheckFinalStatusOperationCompleted, userState);
        }
        
        private void OnCheckFinalStatusOperationCompleted(object arg) {
            if ((this.CheckFinalStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFinalStatusCompleted(this, new CheckFinalStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.CheckHappenDateT" +
            "imeValid", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckHappenDateTimeValid(string AECRecord, string AInstanceID, string AHappendDate, string AHappendTime) {
            object[] results = this.Invoke("CheckHappenDateTimeValid", new object[] {
                        AECRecord,
                        AInstanceID,
                        AHappendDate,
                        AHappendTime});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckHappenDateTimeValid(string AECRecord, string AInstanceID, string AHappendDate, string AHappendTime, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckHappenDateTimeValid", new object[] {
                        AECRecord,
                        AInstanceID,
                        AHappendDate,
                        AHappendTime}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckHappenDateTimeValid(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckHappenDateTimeValidAsync(string AECRecord, string AInstanceID, string AHappendDate, string AHappendTime) {
            this.CheckHappenDateTimeValidAsync(AECRecord, AInstanceID, AHappendDate, AHappendTime, null);
        }
        
        /// <remarks/>
        public void CheckHappenDateTimeValidAsync(string AECRecord, string AInstanceID, string AHappendDate, string AHappendTime, object userState) {
            if ((this.CheckHappenDateTimeValidOperationCompleted == null)) {
                this.CheckHappenDateTimeValidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckHappenDateTimeValidOperationCompleted);
            }
            this.InvokeAsync("CheckHappenDateTimeValid", new object[] {
                        AECRecord,
                        AInstanceID,
                        AHappendDate,
                        AHappendTime}, this.CheckHappenDateTimeValidOperationCompleted, userState);
        }
        
        private void OnCheckHappenDateTimeValidOperationCompleted(object arg) {
            if ((this.CheckHappenDateTimeValidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckHappenDateTimeValidCompleted(this, new CheckHappenDateTimeValidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.ClearLog", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ClearLog(string parInstanceID) {
            object[] results = this.Invoke("ClearLog", new object[] {
                        parInstanceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClearLog(string parInstanceID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClearLog", new object[] {
                        parInstanceID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndClearLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ClearLogAsync(string parInstanceID) {
            this.ClearLogAsync(parInstanceID, null);
        }
        
        /// <remarks/>
        public void ClearLogAsync(string parInstanceID, object userState) {
            if ((this.ClearLogOperationCompleted == null)) {
                this.ClearLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearLogOperationCompleted);
            }
            this.InvokeAsync("ClearLog", new object[] {
                        parInstanceID}, this.ClearLogOperationCompleted, userState);
        }
        
        private void OnClearLogOperationCompleted(object arg) {
            if ((this.ClearLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearLogCompleted(this, new ClearLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetAllLogs", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetAllLogs(string AInstanceID) {
            object[] results = this.Invoke("GetAllLogs", new object[] {
                        AInstanceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAllLogs(string AInstanceID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAllLogs", new object[] {
                        AInstanceID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetAllLogs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetAllLogsAsync(string AInstanceID) {
            this.GetAllLogsAsync(AInstanceID, null);
        }
        
        /// <remarks/>
        public void GetAllLogsAsync(string AInstanceID, object userState) {
            if ((this.GetAllLogsOperationCompleted == null)) {
                this.GetAllLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllLogsOperationCompleted);
            }
            this.InvokeAsync("GetAllLogs", new object[] {
                        AInstanceID}, this.GetAllLogsOperationCompleted, userState);
        }
        
        private void OnGetAllLogsOperationCompleted(object arg) {
            if ((this.GetAllLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllLogsCompleted(this, new GetAllLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetCurrentStatus" +
            "", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetCurrentStatus(string parInstanceID) {
            object[] results = this.Invoke("GetCurrentStatus", new object[] {
                        parInstanceID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCurrentStatus(string parInstanceID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCurrentStatus", new object[] {
                        parInstanceID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetCurrentStatus(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetCurrentStatusAsync(string parInstanceID) {
            this.GetCurrentStatusAsync(parInstanceID, null);
        }
        
        /// <remarks/>
        public void GetCurrentStatusAsync(string parInstanceID, object userState) {
            if ((this.GetCurrentStatusOperationCompleted == null)) {
                this.GetCurrentStatusOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCurrentStatusOperationCompleted);
            }
            this.InvokeAsync("GetCurrentStatus", new object[] {
                        parInstanceID}, this.GetCurrentStatusOperationCompleted, userState);
        }
        
        private void OnGetCurrentStatusOperationCompleted(object arg) {
            if ((this.GetCurrentStatusCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCurrentStatusCompleted(this, new GetCurrentStatusCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetData", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData GetData(string APatientID, string AEpisodeID, string AChartItemID, string AChartItemType, string AChartListNo, string ATemplateID) {
            object[] results = this.Invoke("GetData", new object[] {
                        APatientID,
                        AEpisodeID,
                        AChartItemID,
                        AChartItemType,
                        AChartListNo,
                        ATemplateID});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetData(string APatientID, string AEpisodeID, string AChartItemID, string AChartItemType, string AChartListNo, string ATemplateID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetData", new object[] {
                        APatientID,
                        AEpisodeID,
                        AChartItemID,
                        AChartItemType,
                        AChartListNo,
                        ATemplateID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndGetData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataAsync(string APatientID, string AEpisodeID, string AChartItemID, string AChartItemType, string AChartListNo, string ATemplateID) {
            this.GetDataAsync(APatientID, AEpisodeID, AChartItemID, AChartItemType, AChartListNo, ATemplateID, null);
        }
        
        /// <remarks/>
        public void GetDataAsync(string APatientID, string AEpisodeID, string AChartItemID, string AChartItemType, string AChartListNo, string ATemplateID, object userState) {
            if ((this.GetDataOperationCompleted == null)) {
                this.GetDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataOperationCompleted);
            }
            this.InvokeAsync("GetData", new object[] {
                        APatientID,
                        AEpisodeID,
                        AChartItemID,
                        AChartItemType,
                        AChartListNo,
                        ATemplateID}, this.GetDataOperationCompleted, userState);
        }
        
        private void OnGetDataOperationCompleted(object arg) {
            if ((this.GetDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetDataByID", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData GetDataByID(string AID) {
            object[] results = this.Invoke("GetDataByID", new object[] {
                        AID});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataByID(string AID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataByID", new object[] {
                        AID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndGetDataByID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataByIDAsync(string AID) {
            this.GetDataByIDAsync(AID, null);
        }
        
        /// <remarks/>
        public void GetDataByIDAsync(string AID, object userState) {
            if ((this.GetDataByIDOperationCompleted == null)) {
                this.GetDataByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataByIDOperationCompleted);
            }
            this.InvokeAsync("GetDataByID", new object[] {
                        AID}, this.GetDataByIDOperationCompleted, userState);
        }
        
        private void OnGetDataByIDOperationCompleted(object arg) {
            if ((this.GetDataByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataByIDCompleted(this, new GetDataByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetDataByInstanc" +
            "eID", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReStreamData GetDataByInstanceID(string AInstanceDataID) {
            object[] results = this.Invoke("GetDataByInstanceID", new object[] {
                        AInstanceDataID});
            return ((ReStreamData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDataByInstanceID(string AInstanceDataID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDataByInstanceID", new object[] {
                        AInstanceDataID}, callback, asyncState);
        }
        
        /// <remarks/>
        public ReStreamData EndGetDataByInstanceID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ReStreamData)(results[0]));
        }
        
        /// <remarks/>
        public void GetDataByInstanceIDAsync(string AInstanceDataID) {
            this.GetDataByInstanceIDAsync(AInstanceDataID, null);
        }
        
        /// <remarks/>
        public void GetDataByInstanceIDAsync(string AInstanceDataID, object userState) {
            if ((this.GetDataByInstanceIDOperationCompleted == null)) {
                this.GetDataByInstanceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDataByInstanceIDOperationCompleted);
            }
            this.InvokeAsync("GetDataByInstanceID", new object[] {
                        AInstanceDataID}, this.GetDataByInstanceIDOperationCompleted, userState);
        }
        
        private void OnGetDataByInstanceIDOperationCompleted(object arg) {
            if ((this.GetDataByInstanceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDataByInstanceIDCompleted(this, new GetDataByInstanceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetDescDataByID", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData GetDescDataByID(string AID) {
            object[] results = this.Invoke("GetDescDataByID", new object[] {
                        AID});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetDescDataByID(string AID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetDescDataByID", new object[] {
                        AID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndGetDescDataByID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void GetDescDataByIDAsync(string AID) {
            this.GetDescDataByIDAsync(AID, null);
        }
        
        /// <remarks/>
        public void GetDescDataByIDAsync(string AID, object userState) {
            if ((this.GetDescDataByIDOperationCompleted == null)) {
                this.GetDescDataByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetDescDataByIDOperationCompleted);
            }
            this.InvokeAsync("GetDescDataByID", new object[] {
                        AID}, this.GetDescDataByIDOperationCompleted, userState);
        }
        
        private void OnGetDescDataByIDOperationCompleted(object arg) {
            if ((this.GetDescDataByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetDescDataByIDCompleted(this, new GetDescDataByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetFinalLog", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceLog GetFinalLog(string AInstanceID) {
            object[] results = this.Invoke("GetFinalLog", new object[] {
                        AInstanceID});
            return ((EInstanceLog)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFinalLog(string AInstanceID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFinalLog", new object[] {
                        AInstanceID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceLog EndGetFinalLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceLog)(results[0]));
        }
        
        /// <remarks/>
        public void GetFinalLogAsync(string AInstanceID) {
            this.GetFinalLogAsync(AInstanceID, null);
        }
        
        /// <remarks/>
        public void GetFinalLogAsync(string AInstanceID, object userState) {
            if ((this.GetFinalLogOperationCompleted == null)) {
                this.GetFinalLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFinalLogOperationCompleted);
            }
            this.InvokeAsync("GetFinalLog", new object[] {
                        AInstanceID}, this.GetFinalLogOperationCompleted, userState);
        }
        
        private void OnGetFinalLogOperationCompleted(object arg) {
            if ((this.GetFinalLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFinalLogCompleted(this, new GetFinalLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetGroupDataByID" +
            "", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData GetGroupDataByID(string AID) {
            object[] results = this.Invoke("GetGroupDataByID", new object[] {
                        AID});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGroupDataByID(string AID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGroupDataByID", new object[] {
                        AID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndGetGroupDataByID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupDataByIDAsync(string AID) {
            this.GetGroupDataByIDAsync(AID, null);
        }
        
        /// <remarks/>
        public void GetGroupDataByIDAsync(string AID, object userState) {
            if ((this.GetGroupDataByIDOperationCompleted == null)) {
                this.GetGroupDataByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupDataByIDOperationCompleted);
            }
            this.InvokeAsync("GetGroupDataByID", new object[] {
                        AID}, this.GetGroupDataByIDOperationCompleted, userState);
        }
        
        private void OnGetGroupDataByIDOperationCompleted(object arg) {
            if ((this.GetGroupDataByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupDataByIDCompleted(this, new GetGroupDataByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetGroupItemList" +
            "", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInsGroupNewDataSet GetGroupItemList(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID) {
            object[] results = this.Invoke("GetGroupItemList", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID});
            return ((EInsGroupNewDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetGroupItemList(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetGroupItemList", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInsGroupNewDataSet EndGetGroupItemList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInsGroupNewDataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetGroupItemListAsync(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID) {
            this.GetGroupItemListAsync(APatientID, AEpisodeID, AEpisodeType, AChartItemID, AChartItemType, ACategoryType, ACategoryID, null);
        }
        
        /// <remarks/>
        public void GetGroupItemListAsync(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID, object userState) {
            if ((this.GetGroupItemListOperationCompleted == null)) {
                this.GetGroupItemListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetGroupItemListOperationCompleted);
            }
            this.InvokeAsync("GetGroupItemList", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID}, this.GetGroupItemListOperationCompleted, userState);
        }
        
        private void OnGetGroupItemListOperationCompleted(object arg) {
            if ((this.GetGroupItemListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetGroupItemListCompleted(this, new GetGroupItemListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetInstanceData", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData GetInstanceData(string aEpisodeId, string aTemplateId, string aMountCategoryId) {
            object[] results = this.Invoke("GetInstanceData", new object[] {
                        aEpisodeId,
                        aTemplateId,
                        aMountCategoryId});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetInstanceData(string aEpisodeId, string aTemplateId, string aMountCategoryId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetInstanceData", new object[] {
                        aEpisodeId,
                        aTemplateId,
                        aMountCategoryId}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndGetInstanceData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void GetInstanceDataAsync(string aEpisodeId, string aTemplateId, string aMountCategoryId) {
            this.GetInstanceDataAsync(aEpisodeId, aTemplateId, aMountCategoryId, null);
        }
        
        /// <remarks/>
        public void GetInstanceDataAsync(string aEpisodeId, string aTemplateId, string aMountCategoryId, object userState) {
            if ((this.GetInstanceDataOperationCompleted == null)) {
                this.GetInstanceDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetInstanceDataOperationCompleted);
            }
            this.InvokeAsync("GetInstanceData", new object[] {
                        aEpisodeId,
                        aTemplateId,
                        aMountCategoryId}, this.GetInstanceDataOperationCompleted, userState);
        }
        
        private void OnGetInstanceDataOperationCompleted(object arg) {
            if ((this.GetInstanceDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetInstanceDataCompleted(this, new GetInstanceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetKBDiagnosIDBy" +
            "EpisodeID", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetKBDiagnosIDByEpisodeID(string AEpisodeID) {
            object[] results = this.Invoke("GetKBDiagnosIDByEpisodeID", new object[] {
                        AEpisodeID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetKBDiagnosIDByEpisodeID(string AEpisodeID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetKBDiagnosIDByEpisodeID", new object[] {
                        AEpisodeID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetKBDiagnosIDByEpisodeID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetKBDiagnosIDByEpisodeIDAsync(string AEpisodeID) {
            this.GetKBDiagnosIDByEpisodeIDAsync(AEpisodeID, null);
        }
        
        /// <remarks/>
        public void GetKBDiagnosIDByEpisodeIDAsync(string AEpisodeID, object userState) {
            if ((this.GetKBDiagnosIDByEpisodeIDOperationCompleted == null)) {
                this.GetKBDiagnosIDByEpisodeIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetKBDiagnosIDByEpisodeIDOperationCompleted);
            }
            this.InvokeAsync("GetKBDiagnosIDByEpisodeID", new object[] {
                        AEpisodeID}, this.GetKBDiagnosIDByEpisodeIDOperationCompleted, userState);
        }
        
        private void OnGetKBDiagnosIDByEpisodeIDOperationCompleted(object arg) {
            if ((this.GetKBDiagnosIDByEpisodeIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetKBDiagnosIDByEpisodeIDCompleted(this, new GetKBDiagnosIDByEpisodeIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetMultipleData", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData GetMultipleData(string APatientID, string AEpisodeID, string AChartItemID, string AChartItemType, string AChartListNo, string ATemplateID, string ACategoryID, string ACategoryType) {
            object[] results = this.Invoke("GetMultipleData", new object[] {
                        APatientID,
                        AEpisodeID,
                        AChartItemID,
                        AChartItemType,
                        AChartListNo,
                        ATemplateID,
                        ACategoryID,
                        ACategoryType});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetMultipleData(string APatientID, string AEpisodeID, string AChartItemID, string AChartItemType, string AChartListNo, string ATemplateID, string ACategoryID, string ACategoryType, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetMultipleData", new object[] {
                        APatientID,
                        AEpisodeID,
                        AChartItemID,
                        AChartItemType,
                        AChartListNo,
                        ATemplateID,
                        ACategoryID,
                        ACategoryType}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndGetMultipleData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void GetMultipleDataAsync(string APatientID, string AEpisodeID, string AChartItemID, string AChartItemType, string AChartListNo, string ATemplateID, string ACategoryID, string ACategoryType) {
            this.GetMultipleDataAsync(APatientID, AEpisodeID, AChartItemID, AChartItemType, AChartListNo, ATemplateID, ACategoryID, ACategoryType, null);
        }
        
        /// <remarks/>
        public void GetMultipleDataAsync(string APatientID, string AEpisodeID, string AChartItemID, string AChartItemType, string AChartListNo, string ATemplateID, string ACategoryID, string ACategoryType, object userState) {
            if ((this.GetMultipleDataOperationCompleted == null)) {
                this.GetMultipleDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMultipleDataOperationCompleted);
            }
            this.InvokeAsync("GetMultipleData", new object[] {
                        APatientID,
                        AEpisodeID,
                        AChartItemID,
                        AChartItemType,
                        AChartListNo,
                        ATemplateID,
                        ACategoryID,
                        ACategoryType}, this.GetMultipleDataOperationCompleted, userState);
        }
        
        private void OnGetMultipleDataOperationCompleted(object arg) {
            if ((this.GetMultipleDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMultipleDataCompleted(this, new GetMultipleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetNormalData", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData GetNormalData(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID) {
            object[] results = this.Invoke("GetNormalData", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNormalData(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNormalData", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndGetNormalData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void GetNormalDataAsync(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID) {
            this.GetNormalDataAsync(APatientID, AEpisodeID, AEpisodeType, AChartItemID, AChartItemType, ACategoryType, ACategoryID, null);
        }
        
        /// <remarks/>
        public void GetNormalDataAsync(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID, object userState) {
            if ((this.GetNormalDataOperationCompleted == null)) {
                this.GetNormalDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNormalDataOperationCompleted);
            }
            this.InvokeAsync("GetNormalData", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID}, this.GetNormalDataOperationCompleted, userState);
        }
        
        private void OnGetNormalDataOperationCompleted(object arg) {
            if ((this.GetNormalDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNormalDataCompleted(this, new GetNormalDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetNormalDataOld" +
            "", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData GetNormalDataOld(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID) {
            object[] results = this.Invoke("GetNormalDataOld", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNormalDataOld(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNormalDataOld", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndGetNormalDataOld(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void GetNormalDataOldAsync(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID) {
            this.GetNormalDataOldAsync(APatientID, AEpisodeID, AEpisodeType, AChartItemID, AChartItemType, ACategoryType, ACategoryID, null);
        }
        
        /// <remarks/>
        public void GetNormalDataOldAsync(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID, object userState) {
            if ((this.GetNormalDataOldOperationCompleted == null)) {
                this.GetNormalDataOldOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetNormalDataOldOperationCompleted);
            }
            this.InvokeAsync("GetNormalDataOld", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID}, this.GetNormalDataOldOperationCompleted, userState);
        }
        
        private void OnGetNormalDataOldOperationCompleted(object arg) {
            if ((this.GetNormalDataOldCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetNormalDataOldCompleted(this, new GetNormalDataOldCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetParentGroupLi" +
            "st", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInsGroupNewDataSet GetParentGroupList(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID) {
            object[] results = this.Invoke("GetParentGroupList", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID});
            return ((EInsGroupNewDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetParentGroupList(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetParentGroupList", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInsGroupNewDataSet EndGetParentGroupList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInsGroupNewDataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetParentGroupListAsync(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID) {
            this.GetParentGroupListAsync(APatientID, AEpisodeID, AEpisodeType, AChartItemID, AChartItemType, ACategoryType, ACategoryID, null);
        }
        
        /// <remarks/>
        public void GetParentGroupListAsync(string APatientID, string AEpisodeID, string AEpisodeType, string AChartItemID, string AChartItemType, string ACategoryType, string ACategoryID, object userState) {
            if ((this.GetParentGroupListOperationCompleted == null)) {
                this.GetParentGroupListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetParentGroupListOperationCompleted);
            }
            this.InvokeAsync("GetParentGroupList", new object[] {
                        APatientID,
                        AEpisodeID,
                        AEpisodeType,
                        AChartItemID,
                        AChartItemType,
                        ACategoryType,
                        ACategoryID}, this.GetParentGroupListOperationCompleted, userState);
        }
        
        private void OnGetParentGroupListOperationCompleted(object arg) {
            if ((this.GetParentGroupListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetParentGroupListCompleted(this, new GetParentGroupListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetRefInstanceID" +
            "", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetRefInstanceID(string AEpisodeID, string ATemplateID) {
            object[] results = this.Invoke("GetRefInstanceID", new object[] {
                        AEpisodeID,
                        ATemplateID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRefInstanceID(string AEpisodeID, string ATemplateID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRefInstanceID", new object[] {
                        AEpisodeID,
                        ATemplateID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetRefInstanceID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetRefInstanceIDAsync(string AEpisodeID, string ATemplateID) {
            this.GetRefInstanceIDAsync(AEpisodeID, ATemplateID, null);
        }
        
        /// <remarks/>
        public void GetRefInstanceIDAsync(string AEpisodeID, string ATemplateID, object userState) {
            if ((this.GetRefInstanceIDOperationCompleted == null)) {
                this.GetRefInstanceIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRefInstanceIDOperationCompleted);
            }
            this.InvokeAsync("GetRefInstanceID", new object[] {
                        AEpisodeID,
                        ATemplateID}, this.GetRefInstanceIDOperationCompleted, userState);
        }
        
        private void OnGetRefInstanceIDOperationCompleted(object arg) {
            if ((this.GetRefInstanceIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRefInstanceIDCompleted(this, new GetRefInstanceIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.GetTemplateIDByI" +
            "D", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetTemplateIDByID(string argInstanceId) {
            object[] results = this.Invoke("GetTemplateIDByID", new object[] {
                        argInstanceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTemplateIDByID(string argInstanceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTemplateIDByID", new object[] {
                        argInstanceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetTemplateIDByID(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetTemplateIDByIDAsync(string argInstanceId) {
            this.GetTemplateIDByIDAsync(argInstanceId, null);
        }
        
        /// <remarks/>
        public void GetTemplateIDByIDAsync(string argInstanceId, object userState) {
            if ((this.GetTemplateIDByIDOperationCompleted == null)) {
                this.GetTemplateIDByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTemplateIDByIDOperationCompleted);
            }
            this.InvokeAsync("GetTemplateIDByID", new object[] {
                        argInstanceId}, this.GetTemplateIDByIDOperationCompleted, userState);
        }
        
        private void OnGetTemplateIDByIDOperationCompleted(object arg) {
            if ((this.GetTemplateIDByIDCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTemplateIDByIDCompleted(this, new GetTemplateIDByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.ImportInstanceDa" +
            "ta", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ImportInstanceData(EInstanceData aEInstanceData) {
            object[] results = this.Invoke("ImportInstanceData", new object[] {
                        aEInstanceData});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginImportInstanceData(EInstanceData aEInstanceData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ImportInstanceData", new object[] {
                        aEInstanceData}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndImportInstanceData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ImportInstanceDataAsync(EInstanceData aEInstanceData) {
            this.ImportInstanceDataAsync(aEInstanceData, null);
        }
        
        /// <remarks/>
        public void ImportInstanceDataAsync(EInstanceData aEInstanceData, object userState) {
            if ((this.ImportInstanceDataOperationCompleted == null)) {
                this.ImportInstanceDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportInstanceDataOperationCompleted);
            }
            this.InvokeAsync("ImportInstanceData", new object[] {
                        aEInstanceData}, this.ImportInstanceDataOperationCompleted, userState);
        }
        
        private void OnImportInstanceDataOperationCompleted(object arg) {
            if ((this.ImportInstanceDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportInstanceDataCompleted(this, new ImportInstanceDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.InitAfterMultiOp" +
            "er", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InitAfterMultiOper(string parAction, string parEpisodeID, string parEprDocID, string parEprNum, string parIP, string parHappenDate, string parHappenTime, string parUserID, string parTemplateID) {
            object[] results = this.Invoke("InitAfterMultiOper", new object[] {
                        parAction,
                        parEpisodeID,
                        parEprDocID,
                        parEprNum,
                        parIP,
                        parHappenDate,
                        parHappenTime,
                        parUserID,
                        parTemplateID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInitAfterMultiOper(string parAction, string parEpisodeID, string parEprDocID, string parEprNum, string parIP, string parHappenDate, string parHappenTime, string parUserID, string parTemplateID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InitAfterMultiOper", new object[] {
                        parAction,
                        parEpisodeID,
                        parEprDocID,
                        parEprNum,
                        parIP,
                        parHappenDate,
                        parHappenTime,
                        parUserID,
                        parTemplateID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndInitAfterMultiOper(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InitAfterMultiOperAsync(string parAction, string parEpisodeID, string parEprDocID, string parEprNum, string parIP, string parHappenDate, string parHappenTime, string parUserID, string parTemplateID) {
            this.InitAfterMultiOperAsync(parAction, parEpisodeID, parEprDocID, parEprNum, parIP, parHappenDate, parHappenTime, parUserID, parTemplateID, null);
        }
        
        /// <remarks/>
        public void InitAfterMultiOperAsync(string parAction, string parEpisodeID, string parEprDocID, string parEprNum, string parIP, string parHappenDate, string parHappenTime, string parUserID, string parTemplateID, object userState) {
            if ((this.InitAfterMultiOperOperationCompleted == null)) {
                this.InitAfterMultiOperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitAfterMultiOperOperationCompleted);
            }
            this.InvokeAsync("InitAfterMultiOper", new object[] {
                        parAction,
                        parEpisodeID,
                        parEprDocID,
                        parEprNum,
                        parIP,
                        parHappenDate,
                        parHappenTime,
                        parUserID,
                        parTemplateID}, this.InitAfterMultiOperOperationCompleted, userState);
        }
        
        private void OnInitAfterMultiOperOperationCompleted(object arg) {
            if ((this.InitAfterMultiOperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitAfterMultiOperCompleted(this, new InitAfterMultiOperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.InitAfterSingleO" +
            "per", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string InitAfterSingleOper(string parAction, string parEpisodeID, string parEprDocID, string parEprNum, string parTemplateDocID, string parHappenDate, string parHappenTime, string parIP, string parUserID, string parTemplateID) {
            object[] results = this.Invoke("InitAfterSingleOper", new object[] {
                        parAction,
                        parEpisodeID,
                        parEprDocID,
                        parEprNum,
                        parTemplateDocID,
                        parHappenDate,
                        parHappenTime,
                        parIP,
                        parUserID,
                        parTemplateID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInitAfterSingleOper(string parAction, string parEpisodeID, string parEprDocID, string parEprNum, string parTemplateDocID, string parHappenDate, string parHappenTime, string parIP, string parUserID, string parTemplateID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InitAfterSingleOper", new object[] {
                        parAction,
                        parEpisodeID,
                        parEprDocID,
                        parEprNum,
                        parTemplateDocID,
                        parHappenDate,
                        parHappenTime,
                        parIP,
                        parUserID,
                        parTemplateID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndInitAfterSingleOper(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void InitAfterSingleOperAsync(string parAction, string parEpisodeID, string parEprDocID, string parEprNum, string parTemplateDocID, string parHappenDate, string parHappenTime, string parIP, string parUserID, string parTemplateID) {
            this.InitAfterSingleOperAsync(parAction, parEpisodeID, parEprDocID, parEprNum, parTemplateDocID, parHappenDate, parHappenTime, parIP, parUserID, parTemplateID, null);
        }
        
        /// <remarks/>
        public void InitAfterSingleOperAsync(string parAction, string parEpisodeID, string parEprDocID, string parEprNum, string parTemplateDocID, string parHappenDate, string parHappenTime, string parIP, string parUserID, string parTemplateID, object userState) {
            if ((this.InitAfterSingleOperOperationCompleted == null)) {
                this.InitAfterSingleOperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInitAfterSingleOperOperationCompleted);
            }
            this.InvokeAsync("InitAfterSingleOper", new object[] {
                        parAction,
                        parEpisodeID,
                        parEprDocID,
                        parEprNum,
                        parTemplateDocID,
                        parHappenDate,
                        parHappenTime,
                        parIP,
                        parUserID,
                        parTemplateID}, this.InitAfterSingleOperOperationCompleted, userState);
        }
        
        private void OnInitAfterSingleOperOperationCompleted(object arg) {
            if ((this.InitAfterSingleOperCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InitAfterSingleOperCompleted(this, new InitAfterSingleOperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.ReplaceGroupData" +
            "", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData ReplaceGroupData(string AInstanceID, string ATemplateID, string ATemplateName) {
            object[] results = this.Invoke("ReplaceGroupData", new object[] {
                        AInstanceID,
                        ATemplateID,
                        ATemplateName});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReplaceGroupData(string AInstanceID, string ATemplateID, string ATemplateName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReplaceGroupData", new object[] {
                        AInstanceID,
                        ATemplateID,
                        ATemplateName}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndReplaceGroupData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceGroupDataAsync(string AInstanceID, string ATemplateID, string ATemplateName) {
            this.ReplaceGroupDataAsync(AInstanceID, ATemplateID, ATemplateName, null);
        }
        
        /// <remarks/>
        public void ReplaceGroupDataAsync(string AInstanceID, string ATemplateID, string ATemplateName, object userState) {
            if ((this.ReplaceGroupDataOperationCompleted == null)) {
                this.ReplaceGroupDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceGroupDataOperationCompleted);
            }
            this.InvokeAsync("ReplaceGroupData", new object[] {
                        AInstanceID,
                        ATemplateID,
                        ATemplateName}, this.ReplaceGroupDataOperationCompleted, userState);
        }
        
        private void OnReplaceGroupDataOperationCompleted(object arg) {
            if ((this.ReplaceGroupDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceGroupDataCompleted(this, new ReplaceGroupDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.ReplaceTemplateD" +
            "ata", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData ReplaceTemplateData(string AInstanceID, string ATemplateID) {
            object[] results = this.Invoke("ReplaceTemplateData", new object[] {
                        AInstanceID,
                        ATemplateID});
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginReplaceTemplateData(string AInstanceID, string ATemplateID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ReplaceTemplateData", new object[] {
                        AInstanceID,
                        ATemplateID}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndReplaceTemplateData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void ReplaceTemplateDataAsync(string AInstanceID, string ATemplateID) {
            this.ReplaceTemplateDataAsync(AInstanceID, ATemplateID, null);
        }
        
        /// <remarks/>
        public void ReplaceTemplateDataAsync(string AInstanceID, string ATemplateID, object userState) {
            if ((this.ReplaceTemplateDataOperationCompleted == null)) {
                this.ReplaceTemplateDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnReplaceTemplateDataOperationCompleted);
            }
            this.InvokeAsync("ReplaceTemplateData", new object[] {
                        AInstanceID,
                        ATemplateID}, this.ReplaceTemplateDataOperationCompleted, userState);
        }
        
        private void OnReplaceTemplateDataOperationCompleted(object arg) {
            if ((this.ReplaceTemplateDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ReplaceTemplateDataCompleted(this, new ReplaceTemplateDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.SaveData", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData SaveData(EInstanceData AEInstanceData, ref EMixInstanceLog AEMixInstanceLog, ref string AErrorMessage) {
            object[] results = this.Invoke("SaveData", new object[] {
                        AEInstanceData,
                        AEMixInstanceLog,
                        AErrorMessage});
            AEMixInstanceLog = ((EMixInstanceLog)(results[1]));
            AErrorMessage = ((string)(results[2]));
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveData(EInstanceData AEInstanceData, EMixInstanceLog AEMixInstanceLog, string AErrorMessage, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveData", new object[] {
                        AEInstanceData,
                        AEMixInstanceLog,
                        AErrorMessage}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndSaveData(System.IAsyncResult asyncResult, out EMixInstanceLog AEMixInstanceLog, out string AErrorMessage) {
            object[] results = this.EndInvoke(asyncResult);
            AEMixInstanceLog = ((EMixInstanceLog)(results[1]));
            AErrorMessage = ((string)(results[2]));
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void SaveDataAsync(EInstanceData AEInstanceData, EMixInstanceLog AEMixInstanceLog, string AErrorMessage) {
            this.SaveDataAsync(AEInstanceData, AEMixInstanceLog, AErrorMessage, null);
        }
        
        /// <remarks/>
        public void SaveDataAsync(EInstanceData AEInstanceData, EMixInstanceLog AEMixInstanceLog, string AErrorMessage, object userState) {
            if ((this.SaveDataOperationCompleted == null)) {
                this.SaveDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveDataOperationCompleted);
            }
            this.InvokeAsync("SaveData", new object[] {
                        AEInstanceData,
                        AEMixInstanceLog,
                        AErrorMessage}, this.SaveDataOperationCompleted, userState);
        }
        
        private void OnSaveDataOperationCompleted(object arg) {
            if ((this.SaveDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveDataCompleted(this, new SaveDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.SaveMultipleData" +
            "", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EInstanceData SaveMultipleData(EInstanceData AEInstanceData, ref EMixInstanceLog AEMixInstanceLog, ref string AErrorMessage) {
            object[] results = this.Invoke("SaveMultipleData", new object[] {
                        AEInstanceData,
                        AEMixInstanceLog,
                        AErrorMessage});
            AEMixInstanceLog = ((EMixInstanceLog)(results[1]));
            AErrorMessage = ((string)(results[2]));
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSaveMultipleData(EInstanceData AEInstanceData, EMixInstanceLog AEMixInstanceLog, string AErrorMessage, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SaveMultipleData", new object[] {
                        AEInstanceData,
                        AEMixInstanceLog,
                        AErrorMessage}, callback, asyncState);
        }
        
        /// <remarks/>
        public EInstanceData EndSaveMultipleData(System.IAsyncResult asyncResult, out EMixInstanceLog AEMixInstanceLog, out string AErrorMessage) {
            object[] results = this.EndInvoke(asyncResult);
            AEMixInstanceLog = ((EMixInstanceLog)(results[1]));
            AErrorMessage = ((string)(results[2]));
            return ((EInstanceData)(results[0]));
        }
        
        /// <remarks/>
        public void SaveMultipleDataAsync(EInstanceData AEInstanceData, EMixInstanceLog AEMixInstanceLog, string AErrorMessage) {
            this.SaveMultipleDataAsync(AEInstanceData, AEMixInstanceLog, AErrorMessage, null);
        }
        
        /// <remarks/>
        public void SaveMultipleDataAsync(EInstanceData AEInstanceData, EMixInstanceLog AEMixInstanceLog, string AErrorMessage, object userState) {
            if ((this.SaveMultipleDataOperationCompleted == null)) {
                this.SaveMultipleDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSaveMultipleDataOperationCompleted);
            }
            this.InvokeAsync("SaveMultipleData", new object[] {
                        AEInstanceData,
                        AEMixInstanceLog,
                        AErrorMessage}, this.SaveMultipleDataOperationCompleted, userState);
        }
        
        private void OnSaveMultipleDataOperationCompleted(object arg) {
            if ((this.SaveMultipleDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SaveMultipleDataCompleted(this, new SaveMultipleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.TestSaveMultiple" +
            "Data", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestSaveMultipleData(string aId) {
            object[] results = this.Invoke("TestSaveMultipleData", new object[] {
                        aId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTestSaveMultipleData(string aId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TestSaveMultipleData", new object[] {
                        aId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTestSaveMultipleData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void TestSaveMultipleDataAsync(string aId) {
            this.TestSaveMultipleDataAsync(aId, null);
        }
        
        /// <remarks/>
        public void TestSaveMultipleDataAsync(string aId, object userState) {
            if ((this.TestSaveMultipleDataOperationCompleted == null)) {
                this.TestSaveMultipleDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestSaveMultipleDataOperationCompleted);
            }
            this.InvokeAsync("TestSaveMultipleData", new object[] {
                        aId}, this.TestSaveMultipleDataOperationCompleted, userState);
        }
        
        private void OnTestSaveMultipleDataOperationCompleted(object arg) {
            if ((this.TestSaveMultipleDataCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestSaveMultipleDataCompleted(this, new TestSaveMultipleDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.dhcc.com.cn/epr/metaservice/EPRservice.BOInstanceData.UpdateEPRLogs", RequestNamespace="http://www.dhcc.com.cn/epr/metaservice", ResponseNamespace="http://www.dhcc.com.cn/epr/metaservice", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UpdateEPRLogs(string parEpisodeID, string parAllStr, string parAction, string parIP, string parUserID) {
            object[] results = this.Invoke("UpdateEPRLogs", new object[] {
                        parEpisodeID,
                        parAllStr,
                        parAction,
                        parIP,
                        parUserID});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateEPRLogs(string parEpisodeID, string parAllStr, string parAction, string parIP, string parUserID, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateEPRLogs", new object[] {
                        parEpisodeID,
                        parAllStr,
                        parAction,
                        parIP,
                        parUserID}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndUpdateEPRLogs(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateEPRLogsAsync(string parEpisodeID, string parAllStr, string parAction, string parIP, string parUserID) {
            this.UpdateEPRLogsAsync(parEpisodeID, parAllStr, parAction, parIP, parUserID, null);
        }
        
        /// <remarks/>
        public void UpdateEPRLogsAsync(string parEpisodeID, string parAllStr, string parAction, string parIP, string parUserID, object userState) {
            if ((this.UpdateEPRLogsOperationCompleted == null)) {
                this.UpdateEPRLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateEPRLogsOperationCompleted);
            }
            this.InvokeAsync("UpdateEPRLogs", new object[] {
                        parEpisodeID,
                        parAllStr,
                        parAction,
                        parIP,
                        parUserID}, this.UpdateEPRLogsOperationCompleted, userState);
        }
        
        private void OnUpdateEPRLogsOperationCompleted(object arg) {
            if ((this.UpdateEPRLogsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateEPRLogsCompleted(this, new UpdateEPRLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dhcc.com.cn/epr/metaservice")]
    public partial class EMixInstanceLog {
        
        private string idField;
        
        private string actionField;
        
        private string operateDateField;
        
        private string finalStatusField;
        
        private string initStatusField;
        
        private string operateTimeField;
        
        private string operateUserIDField;
        
        private string operateMachineIPField;
        
        private string realOperateUserIDField;
        
        private string operateUserNameField;
        
        private string isNewFrameworkField;
        
        private string episodeIDField;
        
        private string printTemplateDocIDField;
        
        private string templateDocIDField;
        
        private string stateInfoField;
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
        
        /// <remarks/>
        public string OperateDate {
            get {
                return this.operateDateField;
            }
            set {
                this.operateDateField = value;
            }
        }
        
        /// <remarks/>
        public string FinalStatus {
            get {
                return this.finalStatusField;
            }
            set {
                this.finalStatusField = value;
            }
        }
        
        /// <remarks/>
        public string InitStatus {
            get {
                return this.initStatusField;
            }
            set {
                this.initStatusField = value;
            }
        }
        
        /// <remarks/>
        public string OperateTime {
            get {
                return this.operateTimeField;
            }
            set {
                this.operateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string OperateUserID {
            get {
                return this.operateUserIDField;
            }
            set {
                this.operateUserIDField = value;
            }
        }
        
        /// <remarks/>
        public string OperateMachineIP {
            get {
                return this.operateMachineIPField;
            }
            set {
                this.operateMachineIPField = value;
            }
        }
        
        /// <remarks/>
        public string RealOperateUserID {
            get {
                return this.realOperateUserIDField;
            }
            set {
                this.realOperateUserIDField = value;
            }
        }
        
        /// <remarks/>
        public string OperateUserName {
            get {
                return this.operateUserNameField;
            }
            set {
                this.operateUserNameField = value;
            }
        }
        
        /// <remarks/>
        public string IsNewFramework {
            get {
                return this.isNewFrameworkField;
            }
            set {
                this.isNewFrameworkField = value;
            }
        }
        
        /// <remarks/>
        public string EpisodeID {
            get {
                return this.episodeIDField;
            }
            set {
                this.episodeIDField = value;
            }
        }
        
        /// <remarks/>
        public string PrintTemplateDocID {
            get {
                return this.printTemplateDocIDField;
            }
            set {
                this.printTemplateDocIDField = value;
            }
        }
        
        /// <remarks/>
        public string TemplateDocID {
            get {
                return this.templateDocIDField;
            }
            set {
                this.templateDocIDField = value;
            }
        }
        
        /// <remarks/>
        public string StateInfo {
            get {
                return this.stateInfoField;
            }
            set {
                this.stateInfoField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dhcc.com.cn/epr/metaservice")]
    public partial class ReStreamData {
        
        private string streamDataField;
        
        /// <remarks/>
        public string StreamData {
            get {
                return this.streamDataField;
            }
            set {
                this.streamDataField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dhcc.com.cn/epr/metaservice")]
    public partial class EInstanceData {
        
        private string categoryIDField;
        
        private string categoryTypeField;
        
        private string chartItemIDField;
        
        private string chartItemTypeField;
        
        private System.DateTime createDateField;
        
        private bool createDateFieldSpecified;
        
        private System.DateTime createTimeField;
        
        private bool createTimeFieldSpecified;
        
        private string createUserField;
        
        private string episodeIDField;
        
        private string groupItemIDField;
        
        private string groupItemNameField;
        
        private System.DateTime happenDateField;
        
        private bool happenDateFieldSpecified;
        
        private System.DateTime happenTimeField;
        
        private bool happenTimeFieldSpecified;
        
        private string idField;
        
        private string instanceDataField;
        
        private string listNoField;
        
        private string metaDataField;
        
        private System.DateTime modifyDateField;
        
        private bool modifyDateFieldSpecified;
        
        private System.DateTime modifyTimeField;
        
        private bool modifyTimeFieldSpecified;
        
        private string modifyUserField;
        
        private string patientIDField;
        
        private string presentationDataField;
        
        private string statusField;
        
        private string templateIDField;
        
        private long templateVersionField;
        
        private bool templateVersionFieldSpecified;
        
        private string theECRecordField;
        
        private string titleField;
        
        private string remarkField;
        
        /// <remarks/>
        public string CategoryID {
            get {
                return this.categoryIDField;
            }
            set {
                this.categoryIDField = value;
            }
        }
        
        /// <remarks/>
        public string CategoryType {
            get {
                return this.categoryTypeField;
            }
            set {
                this.categoryTypeField = value;
            }
        }
        
        /// <remarks/>
        public string ChartItemID {
            get {
                return this.chartItemIDField;
            }
            set {
                this.chartItemIDField = value;
            }
        }
        
        /// <remarks/>
        public string ChartItemType {
            get {
                return this.chartItemTypeField;
            }
            set {
                this.chartItemTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime CreateDate {
            get {
                return this.createDateField;
            }
            set {
                this.createDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreateDateSpecified {
            get {
                return this.createDateFieldSpecified;
            }
            set {
                this.createDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="time")]
        public System.DateTime CreateTime {
            get {
                return this.createTimeField;
            }
            set {
                this.createTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool CreateTimeSpecified {
            get {
                return this.createTimeFieldSpecified;
            }
            set {
                this.createTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string CreateUser {
            get {
                return this.createUserField;
            }
            set {
                this.createUserField = value;
            }
        }
        
        /// <remarks/>
        public string EpisodeID {
            get {
                return this.episodeIDField;
            }
            set {
                this.episodeIDField = value;
            }
        }
        
        /// <remarks/>
        public string GroupItemID {
            get {
                return this.groupItemIDField;
            }
            set {
                this.groupItemIDField = value;
            }
        }
        
        /// <remarks/>
        public string GroupItemName {
            get {
                return this.groupItemNameField;
            }
            set {
                this.groupItemNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime HappenDate {
            get {
                return this.happenDateField;
            }
            set {
                this.happenDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HappenDateSpecified {
            get {
                return this.happenDateFieldSpecified;
            }
            set {
                this.happenDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="time")]
        public System.DateTime HappenTime {
            get {
                return this.happenTimeField;
            }
            set {
                this.happenTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool HappenTimeSpecified {
            get {
                return this.happenTimeFieldSpecified;
            }
            set {
                this.happenTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string ID {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        public string InstanceData {
            get {
                return this.instanceDataField;
            }
            set {
                this.instanceDataField = value;
            }
        }
        
        /// <remarks/>
        public string ListNo {
            get {
                return this.listNoField;
            }
            set {
                this.listNoField = value;
            }
        }
        
        /// <remarks/>
        public string MetaData {
            get {
                return this.metaDataField;
            }
            set {
                this.metaDataField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="date")]
        public System.DateTime ModifyDate {
            get {
                return this.modifyDateField;
            }
            set {
                this.modifyDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModifyDateSpecified {
            get {
                return this.modifyDateFieldSpecified;
            }
            set {
                this.modifyDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(DataType="time")]
        public System.DateTime ModifyTime {
            get {
                return this.modifyTimeField;
            }
            set {
                this.modifyTimeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool ModifyTimeSpecified {
            get {
                return this.modifyTimeFieldSpecified;
            }
            set {
                this.modifyTimeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string ModifyUser {
            get {
                return this.modifyUserField;
            }
            set {
                this.modifyUserField = value;
            }
        }
        
        /// <remarks/>
        public string PatientID {
            get {
                return this.patientIDField;
            }
            set {
                this.patientIDField = value;
            }
        }
        
        /// <remarks/>
        public string PresentationData {
            get {
                return this.presentationDataField;
            }
            set {
                this.presentationDataField = value;
            }
        }
        
        /// <remarks/>
        public string Status {
            get {
                return this.statusField;
            }
            set {
                this.statusField = value;
            }
        }
        
        /// <remarks/>
        public string TemplateID {
            get {
                return this.templateIDField;
            }
            set {
                this.templateIDField = value;
            }
        }
        
        /// <remarks/>
        public long TemplateVersion {
            get {
                return this.templateVersionField;
            }
            set {
                this.templateVersionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool TemplateVersionSpecified {
            get {
                return this.templateVersionFieldSpecified;
            }
            set {
                this.templateVersionFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        public string TheECRecord {
            get {
                return this.theECRecordField;
            }
            set {
                this.theECRecordField = value;
            }
        }
        
        /// <remarks/>
        public string Title {
            get {
                return this.titleField;
            }
            set {
                this.titleField = value;
            }
        }
        
        /// <remarks/>
        public string Remark {
            get {
                return this.remarkField;
            }
            set {
                this.remarkField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://www.dhcc.com.cn/epr/metaservice")]
    public partial class EInstanceLog {
        
        private string actionField;
        
        private string operateDateField;
        
        private string finalStatusField;
        
        private string initStatusField;
        
        private string operateTimeField;
        
        private string operateUserIDField;
        
        private string operateMachineIPField;
        
        private string realOperateUserIDField;
        
        private string operateUserNameField;
        
        /// <remarks/>
        public string Action {
            get {
                return this.actionField;
            }
            set {
                this.actionField = value;
            }
        }
        
        /// <remarks/>
        public string OperateDate {
            get {
                return this.operateDateField;
            }
            set {
                this.operateDateField = value;
            }
        }
        
        /// <remarks/>
        public string FinalStatus {
            get {
                return this.finalStatusField;
            }
            set {
                this.finalStatusField = value;
            }
        }
        
        /// <remarks/>
        public string InitStatus {
            get {
                return this.initStatusField;
            }
            set {
                this.initStatusField = value;
            }
        }
        
        /// <remarks/>
        public string OperateTime {
            get {
                return this.operateTimeField;
            }
            set {
                this.operateTimeField = value;
            }
        }
        
        /// <remarks/>
        public string OperateUserID {
            get {
                return this.operateUserIDField;
            }
            set {
                this.operateUserIDField = value;
            }
        }
        
        /// <remarks/>
        public string OperateMachineIP {
            get {
                return this.operateMachineIPField;
            }
            set {
                this.operateMachineIPField = value;
            }
        }
        
        /// <remarks/>
        public string RealOperateUserID {
            get {
                return this.realOperateUserIDField;
            }
            set {
                this.realOperateUserIDField = value;
            }
        }
        
        /// <remarks/>
        public string OperateUserName {
            get {
                return this.operateUserNameField;
            }
            set {
                this.operateUserNameField = value;
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // 此类型定义由 System.Data.Design.TypedDataSetSchemaImporterExtension 架构导入程序扩展生成。
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EInsGroupNewDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public partial class EInsGroupNewDataSet : global::System.Data.DataSet {
        
        private SELECTGroupListNewDataTable tableSELECTGroupListNew;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public EInsGroupNewDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected EInsGroupNewDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["SELECTGroupListNew"] != null)) {
                    base.Tables.Add(new SELECTGroupListNewDataTable(ds.Tables["SELECTGroupListNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SELECTGroupListNewDataTable SELECTGroupListNew {
            get {
                return this.tableSELECTGroupListNew;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            EInsGroupNewDataSet cln = ((EInsGroupNewDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SELECTGroupListNew"] != null)) {
                    base.Tables.Add(new SELECTGroupListNewDataTable(ds.Tables["SELECTGroupListNew"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableSELECTGroupListNew = ((SELECTGroupListNewDataTable)(base.Tables["SELECTGroupListNew"]));
            if ((initTable == true)) {
                if ((this.tableSELECTGroupListNew != null)) {
                    this.tableSELECTGroupListNew.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "EInsGroupNewDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.dhcc.com.cn/epr/metaservice/SELECTGroupListNew";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSELECTGroupListNew = new SELECTGroupListNewDataTable();
            base.Tables.Add(this.tableSELECTGroupListNew);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeSELECTGroupListNew() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EInsGroupNewDataSet ds = new EInsGroupNewDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void SELECTGroupListNewRowChangeEventHandler(object sender, SELECTGroupListNewRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SELECTGroupListNewDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnGroupItemName;
            
            private global::System.Data.DataColumn columnGroupItemID;
            
            private global::System.Data.DataColumn columnItemStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SELECTGroupListNewDataTable() {
                this.TableName = "SELECTGroupListNew";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SELECTGroupListNewDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected SELECTGroupListNewDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GroupItemNameColumn {
                get {
                    return this.columnGroupItemName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn GroupItemIDColumn {
                get {
                    return this.columnGroupItemID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ItemStatusColumn {
                get {
                    return this.columnItemStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SELECTGroupListNewRow this[int index] {
                get {
                    return ((SELECTGroupListNewRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SELECTGroupListNewRowChangeEventHandler SELECTGroupListNewRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SELECTGroupListNewRowChangeEventHandler SELECTGroupListNewRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SELECTGroupListNewRowChangeEventHandler SELECTGroupListNewRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event SELECTGroupListNewRowChangeEventHandler SELECTGroupListNewRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddSELECTGroupListNewRow(SELECTGroupListNewRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SELECTGroupListNewRow AddSELECTGroupListNewRow(string ID, string GroupItemName, string GroupItemID, string ItemStatus) {
                SELECTGroupListNewRow rowSELECTGroupListNewRow = ((SELECTGroupListNewRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ID,
                        GroupItemName,
                        GroupItemID,
                        ItemStatus};
                rowSELECTGroupListNewRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSELECTGroupListNewRow);
                return rowSELECTGroupListNewRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                SELECTGroupListNewDataTable cln = ((SELECTGroupListNewDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SELECTGroupListNewDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnID = base.Columns["ID"];
                this.columnGroupItemName = base.Columns["GroupItemName"];
                this.columnGroupItemID = base.Columns["GroupItemID"];
                this.columnItemStatus = base.Columns["ItemStatus"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnID = new global::System.Data.DataColumn("ID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnGroupItemName = new global::System.Data.DataColumn("GroupItemName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupItemName);
                this.columnGroupItemID = new global::System.Data.DataColumn("GroupItemID", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGroupItemID);
                this.columnItemStatus = new global::System.Data.DataColumn("ItemStatus", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnItemStatus);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SELECTGroupListNewRow NewSELECTGroupListNewRow() {
                return ((SELECTGroupListNewRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SELECTGroupListNewRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(SELECTGroupListNewRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SELECTGroupListNewRowChanged != null)) {
                    this.SELECTGroupListNewRowChanged(this, new SELECTGroupListNewRowChangeEvent(((SELECTGroupListNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SELECTGroupListNewRowChanging != null)) {
                    this.SELECTGroupListNewRowChanging(this, new SELECTGroupListNewRowChangeEvent(((SELECTGroupListNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SELECTGroupListNewRowDeleted != null)) {
                    this.SELECTGroupListNewRowDeleted(this, new SELECTGroupListNewRowChangeEvent(((SELECTGroupListNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SELECTGroupListNewRowDeleting != null)) {
                    this.SELECTGroupListNewRowDeleting(this, new SELECTGroupListNewRowChangeEvent(((SELECTGroupListNewRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveSELECTGroupListNewRow(SELECTGroupListNewRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EInsGroupNewDataSet ds = new EInsGroupNewDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SELECTGroupListNewDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SELECTGroupListNewRow : global::System.Data.DataRow {
            
            private SELECTGroupListNewDataTable tableSELECTGroupListNew;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SELECTGroupListNewRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSELECTGroupListNew = ((SELECTGroupListNewDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ID {
                get {
                    try {
                        return ((string)(this[this.tableSELECTGroupListNew.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SELECTGroupListNew”中列“ID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSELECTGroupListNew.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GroupItemName {
                get {
                    try {
                        return ((string)(this[this.tableSELECTGroupListNew.GroupItemNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SELECTGroupListNew”中列“GroupItemName”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSELECTGroupListNew.GroupItemNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string GroupItemID {
                get {
                    try {
                        return ((string)(this[this.tableSELECTGroupListNew.GroupItemIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SELECTGroupListNew”中列“GroupItemID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSELECTGroupListNew.GroupItemIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string ItemStatus {
                get {
                    try {
                        return ((string)(this[this.tableSELECTGroupListNew.ItemStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“SELECTGroupListNew”中列“ItemStatus”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableSELECTGroupListNew.ItemStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsIDNull() {
                return this.IsNull(this.tableSELECTGroupListNew.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetIDNull() {
                this[this.tableSELECTGroupListNew.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGroupItemNameNull() {
                return this.IsNull(this.tableSELECTGroupListNew.GroupItemNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGroupItemNameNull() {
                this[this.tableSELECTGroupListNew.GroupItemNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsGroupItemIDNull() {
                return this.IsNull(this.tableSELECTGroupListNew.GroupItemIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetGroupItemIDNull() {
                this[this.tableSELECTGroupListNew.GroupItemIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsItemStatusNull() {
                return this.IsNull(this.tableSELECTGroupListNew.ItemStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetItemStatusNull() {
                this[this.tableSELECTGroupListNew.ItemStatusColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class SELECTGroupListNewRowChangeEvent : global::System.EventArgs {
            
            private SELECTGroupListNewRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SELECTGroupListNewRowChangeEvent(SELECTGroupListNewRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public SELECTGroupListNewRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void AddInstanceLogCompletedEventHandler(object sender, AddInstanceLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddInstanceLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddInstanceLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void AddLogCompletedEventHandler(object sender, AddLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ChangeStatusCompletedEventHandler(object sender, ChangeStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void CheckFinalStatusCompletedEventHandler(object sender, CheckFinalStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFinalStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFinalStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void CheckHappenDateTimeValidCompletedEventHandler(object sender, CheckHappenDateTimeValidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckHappenDateTimeValidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckHappenDateTimeValidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ClearLogCompletedEventHandler(object sender, ClearLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ClearLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetAllLogsCompletedEventHandler(object sender, GetAllLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetAllLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetCurrentStatusCompletedEventHandler(object sender, GetCurrentStatusCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCurrentStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetCurrentStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetDataCompletedEventHandler(object sender, GetDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetDataByIDCompletedEventHandler(object sender, GetDataByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetDataByInstanceIDCompletedEventHandler(object sender, GetDataByInstanceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDataByInstanceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDataByInstanceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ReStreamData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ReStreamData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetDescDataByIDCompletedEventHandler(object sender, GetDescDataByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetDescDataByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetDescDataByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetFinalLogCompletedEventHandler(object sender, GetFinalLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFinalLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFinalLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceLog Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceLog)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetGroupDataByIDCompletedEventHandler(object sender, GetGroupDataByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupDataByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupDataByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetGroupItemListCompletedEventHandler(object sender, GetGroupItemListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetGroupItemListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetGroupItemListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInsGroupNewDataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInsGroupNewDataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetInstanceDataCompletedEventHandler(object sender, GetInstanceDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetInstanceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetInstanceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetKBDiagnosIDByEpisodeIDCompletedEventHandler(object sender, GetKBDiagnosIDByEpisodeIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetKBDiagnosIDByEpisodeIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetKBDiagnosIDByEpisodeIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetMultipleDataCompletedEventHandler(object sender, GetMultipleDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMultipleDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMultipleDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetNormalDataCompletedEventHandler(object sender, GetNormalDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNormalDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNormalDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetNormalDataOldCompletedEventHandler(object sender, GetNormalDataOldCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetNormalDataOldCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetNormalDataOldCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetParentGroupListCompletedEventHandler(object sender, GetParentGroupListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetParentGroupListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetParentGroupListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInsGroupNewDataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInsGroupNewDataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetRefInstanceIDCompletedEventHandler(object sender, GetRefInstanceIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRefInstanceIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRefInstanceIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void GetTemplateIDByIDCompletedEventHandler(object sender, GetTemplateIDByIDCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTemplateIDByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetTemplateIDByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ImportInstanceDataCompletedEventHandler(object sender, ImportInstanceDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportInstanceDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ImportInstanceDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void InitAfterMultiOperCompletedEventHandler(object sender, InitAfterMultiOperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitAfterMultiOperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitAfterMultiOperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void InitAfterSingleOperCompletedEventHandler(object sender, InitAfterSingleOperCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InitAfterSingleOperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InitAfterSingleOperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ReplaceGroupDataCompletedEventHandler(object sender, ReplaceGroupDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceGroupDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceGroupDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void ReplaceTemplateDataCompletedEventHandler(object sender, ReplaceTemplateDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ReplaceTemplateDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ReplaceTemplateDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void SaveDataCompletedEventHandler(object sender, SaveDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public EMixInstanceLog AEMixInstanceLog {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EMixInstanceLog)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string AErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void SaveMultipleDataCompletedEventHandler(object sender, SaveMultipleDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SaveMultipleDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SaveMultipleDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public EInstanceData Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EInstanceData)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public EMixInstanceLog AEMixInstanceLog {
            get {
                this.RaiseExceptionIfNecessary();
                return ((EMixInstanceLog)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string AErrorMessage {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void TestSaveMultipleDataCompletedEventHandler(object sender, TestSaveMultipleDataCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestSaveMultipleDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestSaveMultipleDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    public delegate void UpdateEPRLogsCompletedEventHandler(object sender, UpdateEPRLogsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "4.0.30319.33440")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateEPRLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateEPRLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}
